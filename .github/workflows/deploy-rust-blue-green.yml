name: Blue/Green Deploy Rust API to CloudRUN

on:
  push:
    branches: [main]
    paths:
      - 'rust-app/**'
      - 'Dockerfile'
      - '.github/workflows/deploy-rust-blue-green.yml'
  workflow_dispatch:
    inputs:
      deployment_strategy:
        description: 'Deployment strategy'
        required: true
        default: 'canary'
        type: choice
        options:
          - canary
          - blue-green
          - direct
      canary_percentage:
        description: 'Canary traffic percentage (1-99)'
        required: false
        default: '10'
        type: string

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION }}
  SERVICE_NAME: ${{ vars.CLOUDRUN_SERVICE_NAME }}
  REPOSITORY: ${{ vars.ARTIFACT_REGISTRY_REPO }}
  IMAGE_REPOSITORY_PATH: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REGISTRY_REPO }}
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: pinochle-frontend/package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run tests
        run: |
          cargo test --verbose

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked
        
      - name: Security audit
        run: cargo audit
        continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      image_tag: ${{ steps.build-and-push.outputs.image_tag }}
      image_repository: ${{ steps.build-and-push.outputs.image_repository }}

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build Image Metadata
        id: image-meta
        run: |
          # Construct image paths more reliably
          REPO_PATH="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}"
          IMAGE_NAME="${{ env.SERVICE_NAME }}"
          IMAGE_TAG="${REPO_PATH}/${IMAGE_NAME}:${{ github.sha }}"
          LATEST_TAG="${REPO_PATH}/${IMAGE_NAME}:latest"
          
          echo "repo_path=${REPO_PATH}" >> $GITHUB_OUTPUT
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          
          echo "üìù Image metadata:"
          echo "  Repository Path: ${REPO_PATH}"
          echo "  Image Name: ${IMAGE_NAME}"
          echo "  Image Tag: ${IMAGE_TAG}"
          echo "  Latest Tag: ${LATEST_TAG}"

      - name: Build and Push Image
        id: build-and-push
        run: |
          IMAGE_TAG="${{ steps.image-meta.outputs.image_tag }}"
          LATEST_TAG="${{ steps.image-meta.outputs.latest_tag }}"
          
          echo "üê≥ Building image: ${IMAGE_TAG}"
          
          docker build \
            --platform linux/amd64 \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from $LATEST_TAG \
            -f docker/api/Dockerfile \
            -t $IMAGE_TAG \
            -t $LATEST_TAG \
            .
          
          echo "üì§ Pushing images..."
          docker push $IMAGE_TAG
          docker push $LATEST_TAG
          
          # Set outputs for downstream jobs
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "image_repository=${{ steps.image-meta.outputs.repo_path }}" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Build and push completed:"
          echo "  Image Tag: $IMAGE_TAG"
          echo "  Latest Tag: $LATEST_TAG"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Debug - Validate Build Outputs
        run: |
          echo "üîç Debugging build outputs:"
          echo "  image_tag: '${{ needs.build.outputs.image_tag }}'"
          echo "  image_repository: '${{ needs.build.outputs.image_repository }}'"
          echo ""
          echo "üìã Full needs context:"
          echo '${{ toJson(needs.build.outputs) }}'
          echo ""

          # Validate the image tag is not empty
          if [ -z "${{ needs.build.outputs.image_tag }}" ]; then
            echo "‚ùå ERROR: image_tag is empty!"
            exit 1
          else
            echo "‚úÖ image_tag is set: ${{ needs.build.outputs.image_tag }}"
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Get Current Revision
        id: current
        run: |
          CURRENT_REVISION=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.latestReadyRevisionName)" 2>/dev/null || echo "none")
          echo "revision=$CURRENT_REVISION" >> $GITHUB_OUTPUT
          echo "üìã Current revision: $CURRENT_REVISION"

      - name: Deploy New Revision (No Traffic)
        id: deploy
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
        run: |
          echo "üöÄ Deploying image: $IMAGE_TAG"

          # Validate image tag before deployment
          if [ -z "$IMAGE_TAG" ]; then
            echo "‚ùå ERROR: IMAGE_TAG environment variable is empty!"
            echo "Debug info:"
            echo "  needs.build.outputs.image_tag: '${{ needs.build.outputs.image_tag }}'"
            exit 1
          fi

          # Deploy new revision with no traffic initially
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image "$IMAGE_TAG" \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --no-traffic \
            --tag=candidate \
            --port=8080 \
            --max-instances=10 \
            --min-instances=0 \
            --cpu=2 \
            --memory=2Gi \
            --timeout=300 \
            --quiet

          NEW_REVISION=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.latestReadyRevisionName)")
          echo "revision=$NEW_REVISION" >> $GITHUB_OUTPUT
          echo "‚úÖ New revision deployed: $NEW_REVISION"

      - name: Health Check New Revision
        run: |
          # Get the URL for the candidate revision
          CANDIDATE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.traffic[].url)" \
            --filter="status.traffic.tag=candidate")

          if [ -z "$CANDIDATE_URL" ]; then
            echo "‚ùå Could not get candidate URL, falling back to service URL"
            CANDIDATE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --format="value(status.url)")
          fi

          echo "üè• Health checking: $CANDIDATE_URL/api/health"

          # Health check with retries
          for i in {1..10}; do
            if curl -f -m 10 "$CANDIDATE_URL/api/health"; then
              echo "‚úÖ Health check passed on attempt $i"
              break
            else
              echo "‚ùå Health check failed, attempt $i/10"
              if [ $i -eq 10 ]; then
                echo "üí• Health check failed after 10 attempts"
                exit 1
              fi
              sleep 30
            fi
          done
  rollback:
    if: failure()
    needs: [build, deploy]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Rollback Deployment
        run: |
          echo "üö® Deployment failed, initiating rollback..."
          
          # Get the previous stable revision
          PREVIOUS_REVISION=$(gcloud run revisions list \
            --service=${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --filter="status.conditions.type=Ready AND status.conditions.status=True" \
            --sort-by=~metadata.creationTimestamp \
            --format="value(metadata.name)" \
            --limit=2 | tail -n 1)
          
          if [ -n "$PREVIOUS_REVISION" ]; then
            echo "‚è™ Rolling back to revision: $PREVIOUS_REVISION"
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --to-revisions=$PREVIOUS_REVISION=100
            echo "‚úÖ Rollback completed"
          else
            echo "‚ùå No previous revision found for rollback"
          fi