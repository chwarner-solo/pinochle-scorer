name: Deploy Rust API to CloudRun

on:
  push:
    branches: [main]
    paths:
      - 'rust-app/**'
      - 'Dockerfile'
      - '.github/workflows/deploy-rust-blue-green.yml'
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION }}
  SERVICE_NAME: ${{ vars.CLOUDRUN_SERVICE_NAME }}
  REPOSITORY: ${{ vars.ARTIFACT_REGISTRY_REPO }}
  IMAGE_REPOSITORY_PATH: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REGISTRY_REPO }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: pinochle-frontend/package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run tests
        run: |
          cargo test --verbose

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Security audit
        run: cargo audit
        continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and Push Image
        run: |
          # Construct image tag directly from known values
          IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
          LATEST_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:latest"
          
          echo "🐳 Building and pushing: $IMAGE_TAG"
          
          docker build \
            --platform linux/amd64 \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from $LATEST_TAG \
            -f docker/api/Dockerfile \
            -t $IMAGE_TAG \
            -t $LATEST_TAG \
            .
          
          docker push $IMAGE_TAG
          docker push $LATEST_TAG
          
          echo "✅ Built and pushed: $IMAGE_TAG"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Construct Image Tag
        id: image
        run: |
          # Construct the same image tag that was built
          IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
          
          echo "🏷️ Deploying image: $IMAGE_TAG"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          # Validate the image exists in the registry
          echo "🔍 Verifying image exists in registry..."
          if gcloud container images describe "$IMAGE_TAG" --quiet; then
            echo "✅ Image confirmed in registry"
          else
            echo "❌ Image not found in registry!"
            exit 1
          fi

      - name: Deploy to Cloud Run
        run: |
          IMAGE_TAG="${{ steps.image.outputs.image_tag }}"
          echo "🚀 Deploying: $IMAGE_TAG"

          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image "$IMAGE_TAG" \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --port=8080 \
            --max-instances=10 \
            --min-instances=0 \
            --cpu=2 \
            --memory=2Gi \
            --timeout=300 \
            --set-env-vars="FIRESTORE_DATABASE_URL=https://firestore.googleapis.com/v1/projects/${{ env.PROJECT_ID }}/databases/(default),GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }}" \
            --quiet

          echo "✅ Deployment complete"

      - name: Cleanup Old Revisions
        run: |
          echo "🧹 Cleaning up old revisions (keeping last 5)"
          gcloud run revisions list \
            --service=${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --filter="status.conditions.type=Ready AND status.conditions.status=True" \
            --sort-by=~metadata.creationTimestamp \
            --format="value(metadata.name)" \
            --limit=100 | tail -n +6 | while read revision; do
              if [ -n "$revision" ]; then
                echo "🗑️  Deleting old revision: $revision"
                gcloud run revisions delete $revision --region=${{ env.REGION }} --quiet || true
              fi
            done

      - name: Deployment Summary
        run: |
          echo "## 🎉 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ steps.image.outputs.image_tag }}" >> $GITHUB_STEP_SUMMARY

          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          echo "- **CloudRun Service URL**: $SERVICE_URL" >> $GITHUB_STEP_SUMMARY
          echo "- **Load Balancer URL**: https://pinochle-scorer.app" >> $GITHUB_STEP_SUMMARY
          echo "- **API Endpoint**: https://pinochle-scorer.app/api" >> $GITHUB_STEP_SUMMARY