name: Deploy Rust API to CloudRun

on:
  push:
    branches: [main]
    paths:
      - 'rust-app/**'
      - 'Dockerfile'
      - '.github/workflows/deploy-rust-blue-green.yml'
  workflow_dispatch:
    inputs:
      deployment_strategy:
        description: 'Deployment strategy'
        required: true
        default: 'canary'
        type: choice
        options:
          - canary
          - blue-green
          - direct
      canary_percentage:
        description: 'Canary traffic percentage (1-99)'
        required: false
        default: '10'
        type: string

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION }}
  SERVICE_NAME: ${{ vars.CLOUDRUN_SERVICE_NAME }}
  REPOSITORY: ${{ vars.ARTIFACT_REGISTRY_REPO }}
  IMAGE_REPOSITORY_PATH: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REGISTRY_REPO }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: pinochle-frontend/package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run tests
        run: |
          cargo test --verbose

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Security audit
        run: cargo audit
        continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and Push Image
        run: |
          # Construct image tag directly from known values
          IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
          LATEST_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:latest"
          
          echo "üê≥ Building and pushing: $IMAGE_TAG"
          
          docker build \
            --platform linux/amd64 \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from $LATEST_TAG \
            -f docker/api/Dockerfile \
            -t $IMAGE_TAG \
            -t $LATEST_TAG \
            .
          
          docker push $IMAGE_TAG
          docker push $LATEST_TAG
          
          echo "‚úÖ Built and pushed: $IMAGE_TAG"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Construct Image Tag
        id: image
        run: |
          # Construct the same image tag that was built
          IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
          
          echo "üè∑Ô∏è Deploying image: $IMAGE_TAG"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          # Validate the image exists in the registry
          echo "üîç Verifying image exists in registry..."
          if gcloud container images describe "$IMAGE_TAG" --quiet; then
            echo "‚úÖ Image confirmed in registry"
          else
            echo "‚ùå Image not found in registry!"
            exit 1
          fi

      - name: Get Current Revision
        id: current
        run: |
          CURRENT_REVISION=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.latestReadyRevisionName)" 2>/dev/null || echo "none")
          echo "revision=$CURRENT_REVISION" >> $GITHUB_OUTPUT
          echo "üìã Current revision: $CURRENT_REVISION"

      - name: Deploy New Revision (No Traffic)
        id: deploy
        run: |
          IMAGE_TAG="${{ steps.image.outputs.image_tag }}"
          echo "üöÄ Deploying: $IMAGE_TAG"
          
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image "$IMAGE_TAG" \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --no-traffic \
            --port=8080 \
            --max-instances=10 \
            --min-instances=0 \
            --cpu=2 \
            --memory=2Gi \
            --timeout=300 \
            --quiet
          
          NEW_REVISION=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.latestReadyRevisionName)")
          echo "revision=$NEW_REVISION" >> $GITHUB_OUTPUT
          echo "‚úÖ New revision deployed: $NEW_REVISION"

      - name: Health Check New Revision
        run: |
          NEW_REVISION="${{ steps.deploy.outputs.revision }}"
          CURRENT_REVISION="${{ steps.current.outputs.revision }}"
          
          echo "üè• Health checking new revision: $NEW_REVISION"
          
          # Temporarily route 5% traffic to new revision for health check
          if [ "$CURRENT_REVISION" != "none" ]; then
            echo "üîÑ Temporarily routing 5% traffic to new revision for health check..."
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --to-revisions=$NEW_REVISION=5,$CURRENT_REVISION=95 \
              --quiet
          else
            echo "üîÑ No current revision, routing 100% traffic for health check..."
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --to-revisions=$NEW_REVISION=100 \
              --quiet
          fi
          
          # Wait for traffic routing to take effect
          echo "‚è≥ Waiting for traffic routing to take effect..."
          sleep 30
          
          # Get service URL
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          
          echo "üè• Health checking: $SERVICE_URL/api/health"
          
          # Health check with retries
          HEALTH_CHECK_PASSED=false
          for i in {1..10}; do
            echo "üîç Health check attempt $i/10..."
          
            if curl -f -m 10 -s "$SERVICE_URL/api/health"; then
              echo "‚úÖ Health check passed on attempt $i"
              HEALTH_CHECK_PASSED=true
              break
            else
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -m 10 "$SERVICE_URL/api/health" || echo "000")
              echo "‚ùå Health check failed, attempt $i/10 (HTTP: $HTTP_CODE)"
              sleep 30
            fi
          done
          
          # Revert traffic if health check failed
          if [ "$HEALTH_CHECK_PASSED" = "false" ]; then
            echo "üí• Health check failed, reverting traffic..."
            if [ "$CURRENT_REVISION" != "none" ]; then
              gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
                --region=${{ env.REGION }} \
                --to-revisions=$CURRENT_REVISION=100 \
                --quiet
              echo "üîÑ Traffic reverted to previous revision: $CURRENT_REVISION"
            fi
          
            echo "üîç Debug info:"
            echo "  Service URL: $SERVICE_URL"
            echo "  Failed Revision: $NEW_REVISION"
          
            exit 1
          else
            echo "‚úÖ Health check passed, ready for deployment strategy"
            # Reset traffic to no-traffic for the new revision (deployment strategies will handle traffic)
            if [ "$CURRENT_REVISION" != "none" ]; then
              gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
                --region=${{ env.REGION }} \
                --to-revisions=$CURRENT_REVISION=100 \
                --quiet
              echo "üîÑ Traffic reset to current revision for deployment strategy"
            fi
          fi

      - name: Determine Deployment Strategy
        id: strategy
        run: |
          STRATEGY="${{ github.event.inputs.deployment_strategy }}"
          if [ -z "$STRATEGY" ]; then
            STRATEGY="canary"
          fi
          echo "strategy=$STRATEGY" >> $GITHUB_OUTPUT
          echo "üìã Deployment strategy: $STRATEGY"

      - name: Canary Deployment
        if: steps.strategy.outputs.strategy == 'canary'
        run: |
          PERCENTAGE="${{ github.event.inputs.canary_percentage || '10' }}"
          NEW_REVISION="${{ steps.deploy.outputs.revision }}"
          CURRENT_REVISION="${{ steps.current.outputs.revision }}"
          
          echo "üê§ Starting canary deployment with $PERCENTAGE% traffic"
          echo "  New revision: $NEW_REVISION"
          echo "  Current revision: $CURRENT_REVISION"
          
          if [ "$CURRENT_REVISION" != "none" ]; then
            # Calculate remaining percentage for current revision
            REMAINING_PERCENTAGE=$((100-PERCENTAGE))
            echo "üîÑ Splitting traffic: $NEW_REVISION=$PERCENTAGE%, $CURRENT_REVISION=$REMAINING_PERCENTAGE%"
          
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --to-revisions=$NEW_REVISION=$PERCENTAGE,$CURRENT_REVISION=$REMAINING_PERCENTAGE
          else
            echo "üîÑ No current revision, deploying $NEW_REVISION with 100% traffic"
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --to-revisions=$NEW_REVISION=100
          fi
          
          echo "‚è±Ô∏è  Canary running for 5 minutes..."
          sleep 300  # Wait 5 minutes
          
          echo "üìä Checking metrics..."
          # Add your metric checks here
          
          echo "‚úÖ Canary validation passed, promoting to 100%"
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --to-latest

      - name: Blue/Green Deployment
        if: steps.strategy.outputs.strategy == 'blue-green'
        run: |
          echo "üîÑ Blue/Green deployment: Switching 100% traffic"
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --to-latest
          
          echo "‚è±Ô∏è  Monitoring for 2 minutes..."
          sleep 120
          
          echo "üìä Checking post-deployment health..."
          # Add validation checks here

      - name: Direct Deployment
        if: steps.strategy.outputs.strategy == 'direct'
        run: |
          echo "‚ö° Direct deployment: Immediate 100% traffic"
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --to-latest

      - name: Cleanup Old Revisions
        run: |
          echo "üßπ Cleaning up old revisions (keeping last 5)"
          gcloud run revisions list \
            --service=${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --filter="status.conditions.type=Ready AND status.conditions.status=True" \
            --sort-by=~metadata.creationTimestamp \
            --format="value(metadata.name)" \
            --limit=100 | tail -n +6 | while read revision; do
              if [ -n "$revision" ]; then
                echo "üóëÔ∏è  Deleting old revision: $revision"
                gcloud run revisions delete $revision --region=${{ env.REGION }} --quiet || true
              fi
            done

      - name: Deployment Summary
        run: |
          echo "## üéâ Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Strategy**: ${{ steps.strategy.outputs.strategy }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Revision**: ${{ steps.deploy.outputs.revision }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ steps.image.outputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
          
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          echo "- **Service URL**: $SERVICE_URL" >> $GITHUB_STEP_SUMMARY

  rollback:
    if: failure()
    needs: [build, deploy]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Rollback Deployment
        run: |
          echo "üö® Deployment failed, initiating rollback..."
          
          # Get the previous stable revision
          PREVIOUS_REVISION=$(gcloud run revisions list \
            --service=${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --filter="status.conditions.type=Ready AND status.conditions.status=True" \
            --sort-by=~metadata.creationTimestamp \
            --format="value(metadata.name)" \
            --limit=2 | tail -n 1)
          
          if [ -n "$PREVIOUS_REVISION" ]; then
            echo "‚è™ Rolling back to revision: $PREVIOUS_REVISION"
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --to-revisions=$PREVIOUS_REVISION=100
            echo "‚úÖ Rollback completed"
          else
            echo "‚ùå No previous revision found for rollback"
          fi